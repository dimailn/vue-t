"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (pluginName, propsFactory) {
  var nameMapper = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (name) {
    return name;
  };

  var props;
  if (typeof propsFactory !== 'function') {
    return console.error("You must provide props factory");
  }
  props = propsFactory();
  return {
    provide: function provide() {
      var provide, vue;
      vue = Object.getPrototypeOf(this.$root).constructor;
      provide = _defineProperty({}, "" + pluginName, {
        wrapper: {}
      });
      provide[pluginName].wrapper = new vue({
        data: propsFactory()
      });
      this["$_vueProvideObservable_" + pluginName + "_wrapper"] = provide[pluginName].wrapper;
      return provide;
    },
    created: function created() {
      return this["$_vueProvideObservable_" + pluginName + "_wrapper_update"]();
    },
    updated: function updated() {
      return this["$_vueProvideObservable_" + pluginName + "_wrapper_update"]();
    },
    // TO DO: optimize
    watch: Object.keys(props).reduce(function (obj, name) {
      obj[nameMapper(name)] = function () {
        return this["$_vueProvideObservable_" + pluginName + "_wrapper_update"]();
      };
      return obj;
    }, {}),
    methods: _defineProperty({}, "$_vueProvideObservable_" + pluginName + "_wrapper_update", function undefined() {
      var name, results;
      results = [];
      for (name in props) {
        results.push(this["$_vueProvideObservable_" + pluginName + "_wrapper"][name] = this[nameMapper(name)]);
      }
      return results;
    })
  };
};

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } // props is the hash with name => value


;

